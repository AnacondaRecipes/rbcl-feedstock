From a6fc5e464810902a13a0e21f667d7f87a8c41ce5 Mon Sep 17 00:00:00 2001
From: Jack Olivieri <jolivieri@anaconda.com>
Date: Fri, 27 Oct 2023 20:15:22 +0200
Subject: [PATCH] do not depend on pystache

---
 src/rbcl/_sodium_build.py | 56 +++++++++++++++++++--------------------
 1 file changed, 28 insertions(+), 28 deletions(-)

diff --git a/src/rbcl/_sodium_build.py b/src/rbcl/_sodium_build.py
index 882105f..4c1f840 100644
--- a/src/rbcl/_sodium_build.py
+++ b/src/rbcl/_sodium_build.py
@@ -13,7 +13,7 @@ import tarfile
 import errno
 import urllib.request
 from distutils.sysconfig import get_config_vars # pylint: disable=deprecated-module
-import pystache
+# import pystache
 from setuptools.command.install import install
 
 def prepare_libsodium_source_tree(libsodium_folder='src/rbcl/libsodium'):
@@ -77,33 +77,33 @@ def prepare_libsodium_source_tree(libsodium_folder='src/rbcl/libsodium'):
 
     return libsodium_folder
 
-def emit_libsodium():
-    """
-    Emit compiled libsodium binary as hexadecimal string in ``_sodium.py`` file.
-    """
-    # Extract path to compiled libsodium binary.
-    path_libsodium = 'build/temp/lib/libsodium.so' # Default for non-Windows builds.
-    if sys.platform == 'win32':
-        path_directory = (
-            os.environ.get('LIB', None)
-            if os.environ.get('LIB', None) is not None else
-            os.path.join(os.environ['WINDIR'], 'System32') # Windows default.
-        )
-        path_libsodium = os.path.join(path_directory, 'libsodium.dll')
-        if not os.path.exists(path_libsodium):
-            raise EnvironmentError(
-                'libsodium DLL not found at ' + path_libsodium + ', ' +
-                'set environment variable $LIB to path of directory ' +
-                'containing libsodium DLL'
-            )
-
-    # pylint: disable=consider-using-with
-    data = {'SODIUM_HEX': open(path_libsodium, 'rb').read().hex()}
-    template = open('build/lib/rbcl/_sodium.tmpl', encoding='utf-8').read()
-
-    # Emit rendered file to build directory.
-    with open('build/lib/rbcl/_sodium.py', 'w', encoding='utf-8') as sodium_out:
-        sodium_out.write(pystache.render(template, data))
+# def emit_libsodium():
+#     """
+#     Emit compiled libsodium binary as hexadecimal string in ``_sodium.py`` file.
+#     """
+#     # Extract path to compiled libsodium binary.
+#     path_libsodium = 'build/temp/lib/libsodium.so' # Default for non-Windows builds.
+#     if sys.platform == 'win32':
+#         path_directory = (
+#             os.environ.get('LIB', None)
+#             if os.environ.get('LIB', None) is not None else
+#             os.path.join(os.environ['WINDIR'], 'System32') # Windows default.
+#         )
+#         path_libsodium = os.path.join(path_directory, 'libsodium.dll')
+#         if not os.path.exists(path_libsodium):
+#             raise EnvironmentError(
+#                 'libsodium DLL not found at ' + path_libsodium + ', ' +
+#                 'set environment variable $LIB to path of directory ' +
+#                 'containing libsodium DLL'
+#             )
+
+#     # pylint: disable=consider-using-with
+#     data = {'SODIUM_HEX': open(path_libsodium, 'rb').read().hex()}
+#     template = open('build/lib/rbcl/_sodium.tmpl', encoding='utf-8').read()
+
+#     # Emit rendered file to build directory.
+#     with open('build/lib/rbcl/_sodium.py', 'w', encoding='utf-8') as sodium_out:
+#         sodium_out.write(pystache.render(template, data))
 
 def extract_libsodium_from_static_archive(lib_temp: str):
     """
-- 
2.39.3 (Apple Git-145)

